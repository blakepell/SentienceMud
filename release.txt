===============================================

* fixed the TRIG_DAMAGE usage.
	If the script call returns true, the damage call returns false.
	If the script call returns false, the rest of the damage call will be processed.

* trigger TRIG_VERBSELF for tokens
	this trigger works similar to TRIG_VERB, except it requires no target as the trigger is only
	looked on the character's token list.

* trigger TRIG_PRESPELL for spell tokens
	This trigger is used to check for permissions to cast the spell (reagents, cooldowns, etc).
	The beats of the spell must be assigned to the caster's "tempstore1" with "altermob".
	If the script call returns true, the spell cannot be cast.  The script must echo any messages.
	If the script call returns false, the spell processing continues.

* trigger TRIG_PRESPELL for rooms
	This trigger has two parts: check and beats.
	The "check" phase is used to check for permission. True to block the spell.  False to allow the spell.
		Messages must be echoed.
	The "beats" phase is used to modify how long the spell casting will take.  The script needs to modify
		the "tempstore1" on the caster with "altermob".  The value is a percent, indicating how much
		of the spell's natural beats are to be done.

* trigger TRIG_SPELL for spell tokens
	This trigger is called when the spell token is cast.  The level of the spell is stored
		in the token's value 3.  This mechanism obeys the rules of magic as normal spells.
		Things that would affect normal spells will affect token spells.

* placed TRIG_PREDEATH trigger into the system
	This trigger can be used to prevent death.  However, this isn't in place yet.

* boolean ifcheck "hassubclass <player> <subclass>"
	Checks to see if the player has been the specific subclass

	Example: if hassubclass $n gladiator

* boolean ifcheck "issubclass <player> <subclass>"
	Similar to "hassubclass" only it checks the player's current subclass.

* numeric ifcheck "areax <entity>"
	Gets the X coordinate of the AREA where the entity is located.

* numeric ifcheck "areay <entity>"
	Gets the Y coordinate of the AREA where the entity is located.

* added script command "prompt <player> <name>[ <string>]"
	It adds a custom prompt string using the name given as the key.
	Player's can reference this string in their prompts using %<name>.
	These strings will be saved to pfiles eventually.  Currently they are not saved.
	
	Example: mob prompt $(enactor) 'subdued' '{R14{x'
	Prompt Usage: {W[%<subdued>{W]{x
	Will appear as {W[{R14{x{W]{x when expanded out.

* added script command "varseton"
* added script command "varsaveon"
* added script command "varclearon"



